generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  nombre             String
  email              String   @unique
  contrase√±a         String
  telefono           String?
  rol                String
  fecha_creacion     DateTime @default(now())
  
  farms              Farm[]
  detecciones        Deteccion[]
  comentarios_usuario ComentarioUsuario[]
}

model Farm {
  id               Int      @id @default(autoincrement())
  nombre           String
  ubicacion        String
  hectareas        Float
  fecha_creacion   DateTime @default(now())

  userId           Int
  user             User     @relation(fields: [userId], references: [id])

  detecciones      Deteccion[]
}

model Plaga {
  id                      Int      @id @default(autoincrement())
  nombre_cientifico       String
  nombre_comun            String
  descripcion             String
  tipo                    String
  fecha_registro          DateTime @default(now())

  detallesPlagas          DetallesPlaga[]
  recomendaciones         Recomendacion[]
}

model DetallesPlaga {
  id                      Int      @id @default(autoincrement())
  sintomas                String
  imagen_referencia       String
  condiciones_favorables  String

  plagaId                 Int
  plaga                   Plaga     @relation(fields: [plagaId], references: [id])
}

model Deteccion {
  id                      Int      @id @default(autoincrement())
  imagen_analizada        String
  resultado               String
  fecha_analisis          DateTime @default(now())

  farmId                  Int
  usuarioId               Int

  farm                    Farm      @relation(fields: [farmId], references: [id])
  usuario                 User      @relation(fields: [usuarioId], references: [id])

  deteccionesModelo       DeteccionModelo[]
  metricasInferencia      MetricaInferencia[]
  historialRecomendaciones HistorialRecomendacion[]
  comentarios             ComentarioUsuario[]
}

model VersionModeloIA {
  id                      Int      @id @default(autoincrement())
  nombre_modelo           String
  framework               String
  precision_entrenamiento Float
  precision_validacion    Float
  fecha_entrenamiento     DateTime
  notas                   String?

  deteccionesModelo       DeteccionModelo[]
}

model DeteccionModelo {
  id            Int      @id @default(autoincrement())
  deteccionId   Int
  modeloId      Int

  deteccion     Deteccion  @relation(fields: [deteccionId], references: [id])
  modelo        VersionModeloIA @relation(fields: [modeloId], references: [id])
}

model MetricaInferencia {
  id                 Int      @id @default(autoincrement())
  deteccionId        Int
  tiempo_respuesta   Float
  tamano_imagen      Int
  resolucion_imagen  String

  deteccion          Deteccion @relation(fields: [deteccionId], references: [id])
}

model Recomendacion {
  id                   Int      @id @default(autoincrement())
  plagaId              Int
  nombre_insecticida   String
  principio_activo     String
  tipo                 String
  modo_accion          String
  dosis_recomendada    String
  consideraciones      String

  plaga                Plaga @relation(fields: [plagaId], references: [id])
  historialRecomendaciones HistorialRecomendacion[]
}

model HistorialRecomendacion {
  id                  Int      @id @default(autoincrement())
  deteccionId         Int
  recomendacionId     Int
  fecha_recomendacion DateTime @default(now())

  deteccion           Deteccion     @relation(fields: [deteccionId], references: [id])
  recomendacion       Recomendacion @relation(fields: [recomendacionId], references: [id])
}

model ComentarioUsuario {
  id                Int      @id @default(autoincrement())
  deteccionId       Int
  usuarioId         Int
  comentario        String
  nivel_confianza   String
  fecha_comentario  DateTime @default(now())

  deteccion         Deteccion @relation(fields: [deteccionId], references: [id])
  usuario           User      @relation(fields: [usuarioId], references: [id])
}
